{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"EasyClangComplete auto-completion for human beings \u00b6 Simple start in just 3 steps! \u00b6 1. Install this plugin from Package Control \u00b6 In Sublime Text press CTRL + Shift + P and install EasyClangComplete 2. Install clang \u00b6 Ubuntu : sudo apt-get install clang OSX : ships clang by default. You are all set! Windows : install the latest release from clang website. Other Systems : use your package manager or install from clang website. clang website: http://llvm.org/releases/download.html Tip Make sure clang is available in your PATH or that the setting clang binary is set to the full path to your clang binary. 3. Configure your compiler flags and include folders \u00b6 CMake and .sublime-project \u00b6 Your code is inside a valid .sublime-project ? You are using CMake as your build system? You're in luck! The plugin will run cmake on a proper CMakeLists.txt in your project folder and will use information from it to complete your code out of the box! For more details, read here . Tip Make sure cmake is available in your PATH or that the setting cmake binary is set to the full path to your clang binary. Other options \u00b6 If you cannot use CMake in your project there are multiple ways to configure the correct compiler flags. The plugin can use: Settings of the plugin: common_flags and lang_flags Compilation database: compile_commands.json . A .clang_complete file in the folder of the project. (experimental) CppProperties.json or c_cpp_properties.json files just like Visual Studio Code does. (experimental) Makefile : we can parse the recipes from a Makefile to generate proper flags. You can read more in the Configure compiler flags menu on the left of this page. Things to do after setting up \u00b6 Dive into settings \u00b6 There are numerous settings available for this plugin. You can find a comprehensive review of all those settings and how to properly use them in the Full settings guide menu on the left of this page. Explore available commands \u00b6 There is a number of commands that can be invoked from the command panel. See the full list in the Available commands section. It's not you, it's me! \u00b6 If this documentation cannot answer your question, or you have suggestions on how to improve it, do not hesitate to fire up an issue . Support this project! \u00b6","title":"Getting started"},{"location":"#easyclangcomplete-auto-completion-for-human-beings","text":"","title":"EasyClangComplete  auto-completion for human beings "},{"location":"#simple-start-in-just-3-steps","text":"","title":"Simple start in just 3 steps!"},{"location":"#1-install-this-plugin-from-package-control","text":"In Sublime Text press CTRL + Shift + P and install EasyClangComplete","title":"1. Install this plugin from Package Control"},{"location":"#2-install-clang","text":"Ubuntu : sudo apt-get install clang OSX : ships clang by default. You are all set! Windows : install the latest release from clang website. Other Systems : use your package manager or install from clang website. clang website: http://llvm.org/releases/download.html Tip Make sure clang is available in your PATH or that the setting clang binary is set to the full path to your clang binary.","title":"2. Install clang"},{"location":"#3-configure-your-compiler-flags-and-include-folders","text":"","title":"3. Configure your compiler flags and include folders"},{"location":"#cmake-and-sublime-project","text":"Your code is inside a valid .sublime-project ? You are using CMake as your build system? You're in luck! The plugin will run cmake on a proper CMakeLists.txt in your project folder and will use information from it to complete your code out of the box! For more details, read here . Tip Make sure cmake is available in your PATH or that the setting cmake binary is set to the full path to your clang binary.","title":"CMake and .sublime-project"},{"location":"#other-options","text":"If you cannot use CMake in your project there are multiple ways to configure the correct compiler flags. The plugin can use: Settings of the plugin: common_flags and lang_flags Compilation database: compile_commands.json . A .clang_complete file in the folder of the project. (experimental) CppProperties.json or c_cpp_properties.json files just like Visual Studio Code does. (experimental) Makefile : we can parse the recipes from a Makefile to generate proper flags. You can read more in the Configure compiler flags menu on the left of this page.","title":"Other options"},{"location":"#things-to-do-after-setting-up","text":"","title":"Things to do after setting up"},{"location":"#dive-into-settings","text":"There are numerous settings available for this plugin. You can find a comprehensive review of all those settings and how to properly use them in the Full settings guide menu on the left of this page.","title":"Dive into settings"},{"location":"#explore-available-commands","text":"There is a number of commands that can be invoked from the command panel. See the full list in the Available commands section.","title":"Explore available commands"},{"location":"#its-not-you-its-me","text":"If this documentation cannot answer your question, or you have suggestions on how to improve it, do not hesitate to fire up an issue .","title":"It's not you, it's me!"},{"location":"#support-this-project","text":"","title":"Support this project!"},{"location":"about/","text":"About me \u00b6 I am currently a PhD student at the University of Bonn, doing Robotics, Computer Vision and Photogrammetry. This plugin was written because of my obsession with Sublime Text and the need (and will) to code in C++ every day. Support the development of this plugin \u00b6","title":"About me"},{"location":"about/#about-me","text":"I am currently a PhD student at the University of Bonn, doing Robotics, Computer Vision and Photogrammetry. This plugin was written because of my obsession with Sublime Text and the need (and will) to code in C++ every day.","title":"About me"},{"location":"about/#support-the-development-of-this-plugin","text":"","title":"Support the development of this plugin"},{"location":"commands/","text":"Available commands \u00b6 There is a number of commands that you can run from Sublime Text with Ctrl + Shift + P (or Cmd + Shift + P on MacOS) that are related to EasyClangComplete. Pro tip You can assign a key binding to any of the commands represented below to make running them quick and effortless. Clear CMake cache \u00b6 Ctrl + Shift + P -> Clean current CMake cache This command makes sure we clean the temporary build folder where CMake generates files. Show all errors \u00b6 Ctrl + Shift + P -> Show all errors This command shows a panel with a list of all errors that are visible from the current translation unit. When you select one, the plugin will navigate you to the place where the error occurs. Show popup info \u00b6 Ctrl + Shift + P -> Show popup info Show an information popup with the type of the symbol under the cursor. Open settings \u00b6 Ctrl + Shift + P -> Settings Open a new window with Default and User settings opened side by side for quick adjustment of the settings used by the plugin.","title":"Available commands"},{"location":"commands/#available-commands","text":"There is a number of commands that you can run from Sublime Text with Ctrl + Shift + P (or Cmd + Shift + P on MacOS) that are related to EasyClangComplete. Pro tip You can assign a key binding to any of the commands represented below to make running them quick and effortless.","title":"Available commands"},{"location":"commands/#clear-cmake-cache","text":"Ctrl + Shift + P -> Clean current CMake cache This command makes sure we clean the temporary build folder where CMake generates files.","title":"Clear CMake cache"},{"location":"commands/#show-all-errors","text":"Ctrl + Shift + P -> Show all errors This command shows a panel with a list of all errors that are visible from the current translation unit. When you select one, the plugin will navigate you to the place where the error occurs.","title":"Show all errors"},{"location":"commands/#show-popup-info","text":"Ctrl + Shift + P -> Show popup info Show an information popup with the type of the symbol under the cursor.","title":"Show popup info"},{"location":"commands/#open-settings","text":"Ctrl + Shift + P -> Settings Open a new window with Default and User settings opened side by side for quick adjustment of the settings used by the plugin.","title":"Open settings"},{"location":"configs/","text":"Geting correct compiler flags \u00b6 There are multiple options to configure the plugin in such a way that everything works without major pain. This document outlines all these ways. Prefer CMake and Sublime Text projects The preferred way is to use Sublime Text project to organize your code and to use CMake as your build system. This way the plugin should work out of the box. See details below . All flag sources from settings and external \u00b6 There are three major sources for flags: Flags defined in settings of ECC. Flags generated from a flag source defined in flags_sources settings . Flags generated from the compiler. Tip The flags defined in settings are always used when compiling a new translation unit. They are appended to the ones generated from the external sources. Note, that the settings follow a hierarchy described in detail here . Flags defined in settings \u00b6 If you want to set the flag sources manually you can do it using the settings. However, I strongly suggest to NOT do this and use a proper build system instead. It will save you enormous amounts of time configuring the needed include flags. However, if you know what you're doing, the main sources of flags in settings: Flags defined in the common_flags setting - flags added to each compilation of every file. See the link for an example. Flags defined in the lang_flags setting - flags added to each compilation in addition to the common_flags but only for a specific language. Flags defined in external flags sources \u00b6 Using CMake (recommended) \u00b6 EasyClangComplete can search for CMakeLists.txt and generate a compile_commands.json file from it. See next section for details on how this file is parsed. To use CMake way of generating flags, make sure you set the \"flags_sources\" in your settings. See how to set this setting correctly here . Using a compilation database compile_commands.json \u00b6 This file defines the flags per target (read more about it here ). When this file is found, EasyClangComplete reads it and finds appropriate target given the file which is currently opened by the user. Example compile_commands.json file (click to expand) compile_commands.json [ { \"directory\" : \"/main_dir\" , \"command\" : \"/usr/bin/c++ -I/lib_include_dir -o CMakeFiles/main_obj.o -c /home/user/dummy_main.cpp\" , \"file\" : \"/home/user/dummy_main.cpp\" }, { \"directory\" : \"/lib_dir\" , \"command\" : \"/usr/bin/c++ -Dlib_EXPORTS -fPIC -o CMakeFiles/lib_obj.o -c /home/user/dummy_lib.cpp\" , \"file\" : \"/home/user/dummy_lib.cpp\" } ] Hint The compile_commands.json does not contain header files. To complete header files we need to map them to an appropriate source file. By default, the plugin will try to search for the source file with matching name in the same folder as the header file. If this is not enough, use the setting header_to_source_mapping ( details ) in order to define a better mapping from header files to source ones. Using .clang_complete file \u00b6 This is a simple text file where each line defines a single flag. Don't forget, that you must specify the flags fully here. The paths that are not absolute will be expanded from the location of the .clang_complete file. The same wildcards as in settings can be used here too. Example .clang_complete file (click to expand) .clang_complete -I~.config/sublime-text-3/Packages/EasyClangComplete/src -I~.config/sublime-text-3/Packages/EasyClangComplete -Ilocal_folder -Wabi -std=c++14 The first two lines will have ~ expanded to your home directory, local_folder will be appended to the location of the .clang_complete file, other flags will be keps intact. Flags generated from the compiler \u00b6 Some flags can be generated from the compiler. These are governed by two settings: use_default_includes and target_compilers . These will run some command over a chosen compiler, parse the result for the flags specific to the compiler and will append these flags to the other ones. Click on the setting names above to read more about them. Configurations that require manual actions \u00b6 Some configurations cannot be configured without the knowledge that only the end user has. These usually include cases when the code generates files that must be included for proper code completions or when additional paths need to be provided to CMake when it is used as part of some other tool. Below we will provide a list of the ones most commonly used. Catkin setup (click to expand) Catkin configuration \u00b6 For those using Catkin (e.g. when developing with ROS ) the plugin will configure the needed settings automatically if you are using Sublime Text projects. Here is a summary of what the plugin does for you. By default when running Sublime Text from GUI it knows nothing about the paths set in .bashrc of your system and therefore it cannot source your devel workspaces for you. Essentially sourcing the workspaces extends paths that Catkin uses to pass to CMake. So the plugin needs to update the CMAKE_PREFIX_PATH manually to be able to find catkin . Your *.sublime-project will look something like this after the configuration: *.sublime-project \"ecc_flags_sources\" : [ { \"file\" : \"CMakeLists.txt\" , \"prefix_paths\" : [ \"/opt/ros/indigo\" , \"~/catkin_ws/devel\" ] }, ] Warning This will only work if you are using Sublime Text projects with your code. Otherwise no configuration will take place and the proper compiler flags will NOT be generated. You can set these settings also in yout User settings dropping the ecc_ prefix, but this is not a recommended. Qt setup (click to expand) Qt configuration \u00b6 If you use Sublime Text for your Qt development and you use MOC files, you will need some additional setup. MOC generates header and source files from your *.ui files. These files are generated in the build folder of your project. As ECC uses a custom temporary location for your projects' CMake configuration it does not know about the real build location for your code (we might change this in the future, but this is the state for now). You will need to provide the build folder location in your flags. The best way to do this is to modify the ecc_common_flags setting in your Sublime Text project file ( *.sublime-project ). You will need to add a new include flag with the path to your build folder. Example For the sake of example let's consider that your project my_project gets built in a folder ~/YourBuildFolder/my_project . Also, your code lies in src folder within the project. Then you will want to add the following include to your settings: { \"settings\" : { \"ecc_common_flags\" : [ // Don't forget your other includes! \"-I~/YourBuildFolder/$project_name/src\" ], } } This way ECC will add this path as an include path when compiling your code and will be able to find the header files generated by the MOC system. Tip: use wildcards! Configuration is much easier if you use the available wildcards such as the $project_name seen in the example above. For a full list of available wildcards, see the wildcards section on the settings page. Tip: clean project after changing this setting If changing the setting does not work, make use of the Clear CMake cache command as ECC might still be using a cached version of the flags. Warning In my experience, the setting ecc_use_target_compiler_built_in_flags sometimes interferes with properly building Qt projects. So I recommend setting it to false: \"ecc_use_target_compiler_built_in_flags\" : false ,","title":"Configure compiler flags"},{"location":"configs/#geting-correct-compiler-flags","text":"There are multiple options to configure the plugin in such a way that everything works without major pain. This document outlines all these ways. Prefer CMake and Sublime Text projects The preferred way is to use Sublime Text project to organize your code and to use CMake as your build system. This way the plugin should work out of the box. See details below .","title":"Geting correct compiler flags"},{"location":"configs/#all-flag-sources-from-settings-and-external","text":"There are three major sources for flags: Flags defined in settings of ECC. Flags generated from a flag source defined in flags_sources settings . Flags generated from the compiler. Tip The flags defined in settings are always used when compiling a new translation unit. They are appended to the ones generated from the external sources. Note, that the settings follow a hierarchy described in detail here .","title":"All flag sources from settings and external"},{"location":"configs/#flags-defined-in-settings","text":"If you want to set the flag sources manually you can do it using the settings. However, I strongly suggest to NOT do this and use a proper build system instead. It will save you enormous amounts of time configuring the needed include flags. However, if you know what you're doing, the main sources of flags in settings: Flags defined in the common_flags setting - flags added to each compilation of every file. See the link for an example. Flags defined in the lang_flags setting - flags added to each compilation in addition to the common_flags but only for a specific language.","title":"Flags defined in settings"},{"location":"configs/#flags-defined-in-external-flags-sources","text":"","title":"Flags defined in external flags sources"},{"location":"configs/#using-cmake-recommended","text":"EasyClangComplete can search for CMakeLists.txt and generate a compile_commands.json file from it. See next section for details on how this file is parsed. To use CMake way of generating flags, make sure you set the \"flags_sources\" in your settings. See how to set this setting correctly here .","title":"Using CMake  (recommended) "},{"location":"configs/#using-a-compilation-database-compile_commandsjson","text":"This file defines the flags per target (read more about it here ). When this file is found, EasyClangComplete reads it and finds appropriate target given the file which is currently opened by the user. Example compile_commands.json file (click to expand) compile_commands.json [ { \"directory\" : \"/main_dir\" , \"command\" : \"/usr/bin/c++ -I/lib_include_dir -o CMakeFiles/main_obj.o -c /home/user/dummy_main.cpp\" , \"file\" : \"/home/user/dummy_main.cpp\" }, { \"directory\" : \"/lib_dir\" , \"command\" : \"/usr/bin/c++ -Dlib_EXPORTS -fPIC -o CMakeFiles/lib_obj.o -c /home/user/dummy_lib.cpp\" , \"file\" : \"/home/user/dummy_lib.cpp\" } ] Hint The compile_commands.json does not contain header files. To complete header files we need to map them to an appropriate source file. By default, the plugin will try to search for the source file with matching name in the same folder as the header file. If this is not enough, use the setting header_to_source_mapping ( details ) in order to define a better mapping from header files to source ones.","title":"Using a compilation database compile_commands.json"},{"location":"configs/#using-clang_complete-file","text":"This is a simple text file where each line defines a single flag. Don't forget, that you must specify the flags fully here. The paths that are not absolute will be expanded from the location of the .clang_complete file. The same wildcards as in settings can be used here too. Example .clang_complete file (click to expand) .clang_complete -I~.config/sublime-text-3/Packages/EasyClangComplete/src -I~.config/sublime-text-3/Packages/EasyClangComplete -Ilocal_folder -Wabi -std=c++14 The first two lines will have ~ expanded to your home directory, local_folder will be appended to the location of the .clang_complete file, other flags will be keps intact.","title":"Using .clang_complete file"},{"location":"configs/#flags-generated-from-the-compiler","text":"Some flags can be generated from the compiler. These are governed by two settings: use_default_includes and target_compilers . These will run some command over a chosen compiler, parse the result for the flags specific to the compiler and will append these flags to the other ones. Click on the setting names above to read more about them.","title":"Flags generated from the compiler"},{"location":"configs/#configurations-that-require-manual-actions","text":"Some configurations cannot be configured without the knowledge that only the end user has. These usually include cases when the code generates files that must be included for proper code completions or when additional paths need to be provided to CMake when it is used as part of some other tool. Below we will provide a list of the ones most commonly used. Catkin setup (click to expand)","title":"Configurations that require manual actions"},{"location":"configs/#catkin-configuration","text":"For those using Catkin (e.g. when developing with ROS ) the plugin will configure the needed settings automatically if you are using Sublime Text projects. Here is a summary of what the plugin does for you. By default when running Sublime Text from GUI it knows nothing about the paths set in .bashrc of your system and therefore it cannot source your devel workspaces for you. Essentially sourcing the workspaces extends paths that Catkin uses to pass to CMake. So the plugin needs to update the CMAKE_PREFIX_PATH manually to be able to find catkin . Your *.sublime-project will look something like this after the configuration: *.sublime-project \"ecc_flags_sources\" : [ { \"file\" : \"CMakeLists.txt\" , \"prefix_paths\" : [ \"/opt/ros/indigo\" , \"~/catkin_ws/devel\" ] }, ] Warning This will only work if you are using Sublime Text projects with your code. Otherwise no configuration will take place and the proper compiler flags will NOT be generated. You can set these settings also in yout User settings dropping the ecc_ prefix, but this is not a recommended. Qt setup (click to expand)","title":"Catkin configuration"},{"location":"configs/#qt-configuration","text":"If you use Sublime Text for your Qt development and you use MOC files, you will need some additional setup. MOC generates header and source files from your *.ui files. These files are generated in the build folder of your project. As ECC uses a custom temporary location for your projects' CMake configuration it does not know about the real build location for your code (we might change this in the future, but this is the state for now). You will need to provide the build folder location in your flags. The best way to do this is to modify the ecc_common_flags setting in your Sublime Text project file ( *.sublime-project ). You will need to add a new include flag with the path to your build folder. Example For the sake of example let's consider that your project my_project gets built in a folder ~/YourBuildFolder/my_project . Also, your code lies in src folder within the project. Then you will want to add the following include to your settings: { \"settings\" : { \"ecc_common_flags\" : [ // Don't forget your other includes! \"-I~/YourBuildFolder/$project_name/src\" ], } } This way ECC will add this path as an include path when compiling your code and will be able to find the header files generated by the MOC system. Tip: use wildcards! Configuration is much easier if you use the available wildcards such as the $project_name seen in the example above. For a full list of available wildcards, see the wildcards section on the settings page. Tip: clean project after changing this setting If changing the setting does not work, make use of the Clear CMake cache command as ECC might still be using a cached version of the flags. Warning In my experience, the setting ecc_use_target_compiler_built_in_flags sometimes interferes with properly building Qt projects. So I recommend setting it to false: \"ecc_use_target_compiler_built_in_flags\" : false ,","title":"Qt configuration"},{"location":"credits/","text":"Credits \u00b6 The whole work seen here was originally a fork of another repository: ClangAutoComplete However, with time this plugin has grown quite different from its origin and this is why you see it as a separate package now. Anyway, feel free to check out what ClangAutoComplete has to offer and come back if you still like this plugin more. The trick with multiple clang.cindex files is inspired by this repo: clangHelper . Thanks for inspiration! The progress indicator idea is from ColorSublime plugin. Some functionality is there only because of the awesome contributors to this project. To see their names plese check out the contributors page.","title":"Credits"},{"location":"credits/#credits","text":"The whole work seen here was originally a fork of another repository: ClangAutoComplete However, with time this plugin has grown quite different from its origin and this is why you see it as a separate package now. Anyway, feel free to check out what ClangAutoComplete has to offer and come back if you still like this plugin more. The trick with multiple clang.cindex files is inspired by this repo: clangHelper . Thanks for inspiration! The progress indicator idea is from ColorSublime plugin. Some functionality is there only because of the awesome contributors to this project. To see their names plese check out the contributors page.","title":"Credits"},{"location":"includes_completion/","text":"Completing the includes (exprerimental) \u00b6 The plugin has an experimental capability to complete includes. Currently, the automatic completion after typing #include < will not work due to a way brackets get auto-matched by Sublime Text (read more about it here ). However, when using Alt + / on Linux and Ctrl + Space on Windows and macOS after < symbol while typing #include < the plugin will walk the tree starting at the current include folders (read more about where these come from here ) to generate a list of potential includes that it will show momentarily. This is still experimental and can be a bit slow. Also, the number of includes is limited by approx. 4 million entries.","title":"Complete includes"},{"location":"includes_completion/#completing-the-includes-exprerimental","text":"The plugin has an experimental capability to complete includes. Currently, the automatic completion after typing #include < will not work due to a way brackets get auto-matched by Sublime Text (read more about it here ). However, when using Alt + / on Linux and Ctrl + Space on Windows and macOS after < symbol while typing #include < the plugin will walk the tree starting at the current include folders (read more about where these come from here ) to generate a list of potential includes that it will show momentarily. This is still experimental and can be a bit slow. Also, the number of includes is limited by approx. 4 million entries.","title":"Completing the includes (exprerimental)"},{"location":"pc_readme/","text":"EasyClangComplete auto-completion for human beings \u00b6 Simple start in just 3 steps! \u00b6 1. Install this plugin \u00b6 In Sublime Text press CTRL + Shift + P and install EasyClangComplete 2. Install clang \u00b6 Ubuntu : sudo apt-get install clang OSX : ships clang by default. You are all set! Windows : install the latest release from clang website. Other Systems : use your package manager or install from clang website. clang website: http://llvm.org/releases/download.html 3. Configure your compiler flags and include folders \u00b6 Do you use CMake? \u00b6 You're in luck! The plugin will run cmake on a proper CMakeLists.txt in your project folder and will use information from it to complete your code out of the box! For more details, read the plugin docs about CMake . Don't like CMake? \u00b6 Don't worry! There are plenty of ways to configure the plugin! Read the related documentation page for more info! Extensive documentation \u00b6 There are so many things I want to tell you! There is so much the plugin is capable of! Read the docs to get started! Support this project! \u00b6","title":"EasyClangComplete <small> auto-completion for human beings </small>"},{"location":"pc_readme/#easyclangcomplete-auto-completion-for-human-beings","text":"","title":"EasyClangComplete  auto-completion for human beings "},{"location":"pc_readme/#simple-start-in-just-3-steps","text":"","title":"Simple start in just 3 steps!"},{"location":"pc_readme/#1-install-this-plugin","text":"In Sublime Text press CTRL + Shift + P and install EasyClangComplete","title":"1. Install this plugin"},{"location":"pc_readme/#2-install-clang","text":"Ubuntu : sudo apt-get install clang OSX : ships clang by default. You are all set! Windows : install the latest release from clang website. Other Systems : use your package manager or install from clang website. clang website: http://llvm.org/releases/download.html","title":"2. Install clang"},{"location":"pc_readme/#3-configure-your-compiler-flags-and-include-folders","text":"","title":"3. Configure your compiler flags and include folders"},{"location":"pc_readme/#do-you-use-cmake","text":"You're in luck! The plugin will run cmake on a proper CMakeLists.txt in your project folder and will use information from it to complete your code out of the box! For more details, read the plugin docs about CMake .","title":"Do you use CMake?"},{"location":"pc_readme/#dont-like-cmake","text":"Don't worry! There are plenty of ways to configure the plugin! Read the related documentation page for more info!","title":"Don't like CMake?"},{"location":"pc_readme/#extensive-documentation","text":"There are so many things I want to tell you! There is so much the plugin is capable of! Read the docs to get started!","title":"Extensive documentation"},{"location":"pc_readme/#support-this-project","text":"","title":"Support this project!"},{"location":"settings/","text":"Three levels of settings for EasyClangComplete \u00b6 Default settings (shipped with the plugin) Global user settings (defined globally for the whole plugin) Project settings (defined in a .sublime-project file for a specific project) Warning Project-related settings will only work when your code has a .sublime-project file related to it. For documentation on using the Sublime Text projects please refer here . Settings hierarchy \u00b6 If no settings are defined the Default ones are used User settings have precedence over the Default ones Project settings have precedence over the User and Default ones Common path wildcards \u00b6 Every path variable in settings can contain wildcards: $project_base_path is replaced by the full path to the project to which the currently opened view belongs. $project_name is replaced by the name of the current project. $clang_version is replaced by the numeric version of used clang. ~ is replaced by the path to user home directory. * when put at the end of folder path expands to all folders in that folder. Not recursive. Using environmental variables \u00b6 In addition to the variables described above, you can use your environment variables: OSX and Linux: $variable_name or ${ variable_name } Windows: $variable_name , ${ variable_name } or %variable_name % How to define project settings \u00b6 The project-specific settings are only available when the code is within a Sublime Text project defined by a *.sublime-project file. They must be stored under the \"settings\" tab in the project file with either of the two prefixes: ecc_ or easy_clang_complete_ . See example below for more clarifications. Example of setting verbose and use_libclang project-specific settings my_project.sublime-project { \"settings\" : { \"easy_clang_complete_verbose\" : true , \"ecc_use_libclang\" : true , } } Note that for verbose setting a prefix easy_clang_complete_ is used, while for use_libclang we use ecc_ prefix. Project settings override User and Default settings The settings defined in the *.sublime-project file override User and Default settings. Keep that in mind when specifying them! They are not appended , they override these settings. Complete settings list \u00b6 This is a complete guide over all settings. Here we look at every setting in detail, explain where they are used and what are their default values. common_flags \u00b6 Specify common flags that are passed to clang for every compilation. These usually include common include paths that are needed for finding STL etc. Below are typical defaults for Linux. Good defaults for Linux (click to expand) \"common_flags\" : [ \"-I/usr/include\" , \"-I$project_base_path/src\" , // this is needed to include the correct headers for clang \"-I/usr/lib/clang/$clang_version/include\" , ] , Good defaults MacOS (click to expand) \"common_flags\" : [ // some example includes \"-I/usr/include/\" , \"-I/usr/local/include\" , \"-I/Library/Developer/CommandLineTools/usr/lib/clang/$clang_version\" , \"-I/Library/Developer/CommandLineTools/usr/include/c++/v1\" , ] , Good defaults for Windows with MinGW (click to expand) \"common_flags\" : [ \"-IC:\\\\MinGW\\\\lib\\\\gcc\\\\mingw32\\\\6.3.0\\\\include\\\\c++\" , \"-IC:\\\\MinGW\\\\lib\\\\gcc\\\\mingw32\\\\6.3.0\\\\include\\\\c++\\\\mingw32\" ] , Here I have installed MinGW from MinGW downloads page . Everything seems to work including the STL support. lang_flags \u00b6 These flags are language-specific. They prepend common_flags when compiling files of a particular language. This is a good place to define flags for a standard library etc. Default value \"lang_flags\" : { \"C\" : [ \"-std=c11\" ], \"CPP\" : [ \"-std=c++11\" ], \"OBJECTIVE_C\" : [ \"-std=c11\" ], \"OBJECTIVE_CPP\" : [ \"-std=c++11\" ], } , Warning When specifying this setting in your user or project settings make sure to keep ALL language keys. flags_sources \u00b6 This setting defines external sources for the compilation flags. If you have a build system (e.g. CMake) in place or have an external file that defines all the compilation flags for your project (e.g. a compilation database compile_commands.json ) , you can load the flags directly from there. For more details on differences between the flag sources refer to this page of the documentation. common_flags and lang_flags are never overridden by external flag sources The flags from common_flags and from lang_flags are ALWAYS present in the compilation. The flags loaded from the flag sources are appended to those and DO NOT OVERRIDE them. Possible options \u00b6 \"file\" MANDATORY - defines the name of the flags source. Can be one of: \"CMakeLists.txt\" looks for a CMakeLists.txt file that contains a line that starts with \"project\" in it \"compile_commands.json\" \"CppProperties.json\" \"c_cpp_properties.json\" \".clang_complete\" \"Makefile\" \"search_in\": <path> OPTIONAL - defines a folder in which the file should be searched. If it is not defined, the search starts from the current file up the directory tree. CMake-specific options \u00b6 CMake is handled in a special way and there are additional settings that can be specified for this type of flag source: \"flags\": [<flags>] OPTIONAL - defines a list of flags that can be passed to the cmake program upon calling it \"prefix_paths\": [<paths>] OPTIONAL - defines a list of paths that will be set as prefix paths when running cmake Search order \u00b6 The flag sources are searched in a strictly hierarchical order from top to bottom. First the top-most \"file\" is searched for. If this search fails, the second \"file\" is searched. This continues until either one of the flag sources is found or the list has finished. See example below for more explanations. Example flag sources (click to expand) In this example we define a number of flag sources with some additional options: \"flags_sources\" : [ { \"file\" : \"CMakeLists.txt\" , \"flags\" : [ \"-DCMAKE_BUILD_TYPE=Release\" , ], \"prefix_paths\" : [ \"/opt/ros/indigo\" ] }, { \"file\" : \"Makefile\" }, { \"file\" : \".clang_complete\" } ] , Here, first the plugin tries to find a CMakeLists.txt with project(<smth>) inside of it. If this is successful, then it invokes a command cmake -DCMAKE_PREFIX_PATHS = /opt/ros/indigo -DCMAKE_BUILD_TYPE = Release <folder_to_CMakeLists.txt> storing the generated files in a temporary build folder. If the CMakeLists.txt file cannot be found, the plugin continues to search for a Makefile and if that fails - for a .clang_complete file show_errors \u00b6 When this option is true the errors will be highlighted upon every file save. Default value \"show_errors\" : true , gutter_style \u00b6 Defines the style of the gutter icon shown on the sidebar. Possible values \u00b6 : \"color\" default : \"mono\" : \"dot\" \"none\" Default value \"gutter_style\" : \"color\" , popup_maximum_width \u00b6 Setting that controls the maximum width of the popups generated by the plugin. Default value \"popup_maximum_width\" : 1800 , popup_maximum_height \u00b6 Setting that controls the maximum height of the popups generated by the plugin. Default value \"popup_maximum_height\" : 800 , triggers \u00b6 Defines all characters that trigger auto-completion. The default value is: Default value \"triggers\" : [ \".\" , \"->\" , \"::\" , \" \" , \" \" , \"(\" , \"[\" ] , valid_lang_syntaxes \u00b6 A dictionary that defines a mapping from language to an array of valid syntaxes for it. The values here are good defaults, but feel free to customize the list to your liking. When modifying this setting make sure that all 4 languages have values. Default value \"valid_lang_syntaxes\" : { \"C\" : [ \"C\" , \"C Improved\" , \"C99\" ], \"CPP\" : [ \"C++\" , \"C++11\" ], \"OBJECTIVE_C\" : [ \"Objective-C\" ], \"OBJECTIVE_CPP\" : [ \"Objective-C++\" ] } , Warning When specifying this setting in your user or project settings make sure to keep ALL language keys. ignore_list \u00b6 Do not run the plugin for any files that match these paths. Use glob/fnmatch shell-style filename expansion. In addition, you can still use '~' to mark the home directory. Default value \"ignore_list\" : [ \"~/some_folder/*\" , \"/some/absolute/file.ext\" , \"$project_base_path/some/project/path/*\" , ] , use_libclang \u00b6 If set to true will use libclang through python bindings. This offers much better performance generally, but can be buggy on some systems. When set to false will use clang_binary and parse the output of clang -Xclang -code-complete-at <some_file> instead. Default value \"use_libclang\" : true , use_default_includes \u00b6 If set to true there will be default includes added to the \"common_flags\" . We generate these includes from running the following command on some empty temp file test.cc : <clang_binary> -c test.cc -v See clang_binary setting for more details on what clang binary will be in use. Default value \"use_default_includes\" : true , verbose \u00b6 Output lots of additional information in the console. Useful for debugging. Off by default. Default value \"verbose\" : false , include_file_folder \u00b6 Add the folder with current file with -I flag. Default value \"include_file_folder\" : true , include_file_parent_folder \u00b6 Add the parent folder of the current file's one with -I flag Default value \"include_file_parent_folder\" : true , clang_binary \u00b6 Pick the clang binary used by the plugin. This is used to determine the version of the plugin and pick correct libclang bindings or for code completion when the setting use_libclang is set to false . Default value \"clang_binary\" : \"clang++\" , cmake_binary \u00b6 Pick the binary used for cmake . Default value \"cmake_binary\" : \"cmake\" , Warning Please make sure the binary you provide is accessible from the command line on your system. autocomplete_all \u00b6 Ignore triggers and try to complete after each character Default value \"autocomplete_all\" : false , Danger Can be very slow! Enable only if you know what you are doing! hide_default_completions \u00b6 Hide the completions generated by Sublime Text and other plugins. Default value \"hide_default_completions\" : false , max_cache_age \u00b6 Plugin uses smart caching to not load the data for the translation units (TUs) more times than needed. To save space we want to clear the unused data, so we remove cache data older than specified time. Tip Minimum value is 30 seconds. Format: <hours>:<minutes>:<seconds>: \"HH:MM:SS\" . Default value \"max_cache_age\" : \"00:30:00\" , show_type_info \u00b6 Show additional information on hover over function call/variable etc. This replaces default sublime on hover behavior. Default value \"show_type_info\" : true , show_type_body \u00b6 Show body of struct/class/typedef declaration in a tooltip invoked by calling info enabled by the setting show_type_info . Default value \"show_type_body\" : true , show_index_references \u00b6 We only can get declarations from clang AST. This can show references to the symbol under cursor taking them from Sublime Text index. Default value \"show_index_references\" : true , libclang_path \u00b6 If the libclang library cannot be found in standard places, the user can provide a path to libclang . This path can either be a full path to the libclang library, e.g. /usr/lib/libclang.so or a folder that contains libclang library, e.g. /usr/lib/ . This setting generally should not be needed. Default value \"libclang_path\" : \"<some_path_here>\" , progress_style \u00b6 Pick the progress style. There are currently these styles available: ColorSublime : \u28fe\u28fd\u28fb\u28bf\u287f\u28df\u28ef\u28f7 Moon : \ud83c\udf11\ud83c\udf12\ud83c\udf13\ud83c\udf14\ud83c\udf15\ud83c\udf16\ud83c\udf17\ud83c\udf18 None Default value \"progress_style\" : \"Moon\" , use_libclang_caching \u00b6 Controls if libclang caches the results. This works faster, but in rare cases can generate wrong completions. Usually it works just fine, so it is true by default. Default value \"use_libclang_caching\" : true , header_to_source_mapping \u00b6 Templates to find source files for headers in case we use a compilation database: Such a DB does not contain the required compile flags for header files. In order to find a best matching source file instead, you can use templates. Such templates describe how to find (relative to the header file) a source file which we can use to get compile flags for. In the simplest case, one can just use the (relative) path to where the source files are relative to your header file. For example, if your headers are in a subdirectory \"inc\" and your sources in a subdirectory \"src\" next to the first one, then you can use \"../src/\" as lookup. If needed, you can also use finer granular lookup templates by using UNIX style globbing patterns and placeholders. Placeholders are of the form '{placeholdername}' . The following placeholders can be used: basename: The base file name without the directory part. stamp: Like \"basename\" , but with the file name extension removed. ext: The file name extension of the header file. Default header - source mappings (click to expand) \"header_to_source_mapping\" : [ // Look for related files in the header's directory: \"./\" , // And in the \"src\" directory: \"../src/\" , // And in the \"source\" directory: \"../source/\" , // Example: Use flags but only from the source file // belonging to the header in question: // \"{stamp}.cpp\" , // Example: Use flags from a file with an // \"exotic\" file name suffix: // \" { stamp } .mycustomext ] , target_compilers \u00b6 Controls if we try to retrieve built-in flags from a target compiler. If a compiler is not null , we try to ask it for the defines and include paths it sets implicitly and pass them to the clang compiler which is used to generate the code completion. If your completions require the knowledge about the toolchain, this option should improve the quality of the completions, however, in some corner cases it might cause completions to fail entirely. Default value \"target_compilers\" : { \"C\" : null , \"CPP\" : null , \"OBJECTIVE_C\" : null , \"OBJECTIVE_CPP\" : null } , Warning When specifying this setting in your user or project settings make sure to keep ALL language keys. Otherwise the plugin will show you an error dialog and ask you to specify all of them. Put null for those you don't want to use. Example: set only C/C++ compilers \"target_compilers\" : { \"C\" : \"gcc\" , \"CPP\" : \"g++\" , \"OBJECTIVE_C\" : null , \"OBJECTIVE_CPP\" : null } ,","title":"Full settings guide"},{"location":"settings/#three-levels-of-settings-for-easyclangcomplete","text":"Default settings (shipped with the plugin) Global user settings (defined globally for the whole plugin) Project settings (defined in a .sublime-project file for a specific project) Warning Project-related settings will only work when your code has a .sublime-project file related to it. For documentation on using the Sublime Text projects please refer here .","title":"Three levels of settings for EasyClangComplete"},{"location":"settings/#settings-hierarchy","text":"If no settings are defined the Default ones are used User settings have precedence over the Default ones Project settings have precedence over the User and Default ones","title":"Settings hierarchy"},{"location":"settings/#common-path-wildcards","text":"Every path variable in settings can contain wildcards: $project_base_path is replaced by the full path to the project to which the currently opened view belongs. $project_name is replaced by the name of the current project. $clang_version is replaced by the numeric version of used clang. ~ is replaced by the path to user home directory. * when put at the end of folder path expands to all folders in that folder. Not recursive.","title":"Common path wildcards"},{"location":"settings/#using-environmental-variables","text":"In addition to the variables described above, you can use your environment variables: OSX and Linux: $variable_name or ${ variable_name } Windows: $variable_name , ${ variable_name } or %variable_name %","title":"Using environmental variables"},{"location":"settings/#how-to-define-project-settings","text":"The project-specific settings are only available when the code is within a Sublime Text project defined by a *.sublime-project file. They must be stored under the \"settings\" tab in the project file with either of the two prefixes: ecc_ or easy_clang_complete_ . See example below for more clarifications. Example of setting verbose and use_libclang project-specific settings my_project.sublime-project { \"settings\" : { \"easy_clang_complete_verbose\" : true , \"ecc_use_libclang\" : true , } } Note that for verbose setting a prefix easy_clang_complete_ is used, while for use_libclang we use ecc_ prefix. Project settings override User and Default settings The settings defined in the *.sublime-project file override User and Default settings. Keep that in mind when specifying them! They are not appended , they override these settings.","title":"How to define project settings"},{"location":"settings/#complete-settings-list","text":"This is a complete guide over all settings. Here we look at every setting in detail, explain where they are used and what are their default values.","title":"Complete settings list"},{"location":"settings/#common_flags","text":"Specify common flags that are passed to clang for every compilation. These usually include common include paths that are needed for finding STL etc. Below are typical defaults for Linux. Good defaults for Linux (click to expand) \"common_flags\" : [ \"-I/usr/include\" , \"-I$project_base_path/src\" , // this is needed to include the correct headers for clang \"-I/usr/lib/clang/$clang_version/include\" , ] , Good defaults MacOS (click to expand) \"common_flags\" : [ // some example includes \"-I/usr/include/\" , \"-I/usr/local/include\" , \"-I/Library/Developer/CommandLineTools/usr/lib/clang/$clang_version\" , \"-I/Library/Developer/CommandLineTools/usr/include/c++/v1\" , ] , Good defaults for Windows with MinGW (click to expand) \"common_flags\" : [ \"-IC:\\\\MinGW\\\\lib\\\\gcc\\\\mingw32\\\\6.3.0\\\\include\\\\c++\" , \"-IC:\\\\MinGW\\\\lib\\\\gcc\\\\mingw32\\\\6.3.0\\\\include\\\\c++\\\\mingw32\" ] , Here I have installed MinGW from MinGW downloads page . Everything seems to work including the STL support.","title":"common_flags"},{"location":"settings/#lang_flags","text":"These flags are language-specific. They prepend common_flags when compiling files of a particular language. This is a good place to define flags for a standard library etc. Default value \"lang_flags\" : { \"C\" : [ \"-std=c11\" ], \"CPP\" : [ \"-std=c++11\" ], \"OBJECTIVE_C\" : [ \"-std=c11\" ], \"OBJECTIVE_CPP\" : [ \"-std=c++11\" ], } , Warning When specifying this setting in your user or project settings make sure to keep ALL language keys.","title":"lang_flags"},{"location":"settings/#flags_sources","text":"This setting defines external sources for the compilation flags. If you have a build system (e.g. CMake) in place or have an external file that defines all the compilation flags for your project (e.g. a compilation database compile_commands.json ) , you can load the flags directly from there. For more details on differences between the flag sources refer to this page of the documentation. common_flags and lang_flags are never overridden by external flag sources The flags from common_flags and from lang_flags are ALWAYS present in the compilation. The flags loaded from the flag sources are appended to those and DO NOT OVERRIDE them.","title":"flags_sources"},{"location":"settings/#possible-options","text":"\"file\" MANDATORY - defines the name of the flags source. Can be one of: \"CMakeLists.txt\" looks for a CMakeLists.txt file that contains a line that starts with \"project\" in it \"compile_commands.json\" \"CppProperties.json\" \"c_cpp_properties.json\" \".clang_complete\" \"Makefile\" \"search_in\": <path> OPTIONAL - defines a folder in which the file should be searched. If it is not defined, the search starts from the current file up the directory tree.","title":"Possible options"},{"location":"settings/#cmake-specific-options","text":"CMake is handled in a special way and there are additional settings that can be specified for this type of flag source: \"flags\": [<flags>] OPTIONAL - defines a list of flags that can be passed to the cmake program upon calling it \"prefix_paths\": [<paths>] OPTIONAL - defines a list of paths that will be set as prefix paths when running cmake","title":"CMake-specific options"},{"location":"settings/#search-order","text":"The flag sources are searched in a strictly hierarchical order from top to bottom. First the top-most \"file\" is searched for. If this search fails, the second \"file\" is searched. This continues until either one of the flag sources is found or the list has finished. See example below for more explanations. Example flag sources (click to expand) In this example we define a number of flag sources with some additional options: \"flags_sources\" : [ { \"file\" : \"CMakeLists.txt\" , \"flags\" : [ \"-DCMAKE_BUILD_TYPE=Release\" , ], \"prefix_paths\" : [ \"/opt/ros/indigo\" ] }, { \"file\" : \"Makefile\" }, { \"file\" : \".clang_complete\" } ] , Here, first the plugin tries to find a CMakeLists.txt with project(<smth>) inside of it. If this is successful, then it invokes a command cmake -DCMAKE_PREFIX_PATHS = /opt/ros/indigo -DCMAKE_BUILD_TYPE = Release <folder_to_CMakeLists.txt> storing the generated files in a temporary build folder. If the CMakeLists.txt file cannot be found, the plugin continues to search for a Makefile and if that fails - for a .clang_complete file","title":"Search order"},{"location":"settings/#show_errors","text":"When this option is true the errors will be highlighted upon every file save. Default value \"show_errors\" : true ,","title":"show_errors"},{"location":"settings/#gutter_style","text":"Defines the style of the gutter icon shown on the sidebar.","title":"gutter_style"},{"location":"settings/#possible-values","text":": \"color\" default : \"mono\" : \"dot\" \"none\" Default value \"gutter_style\" : \"color\" ,","title":"Possible values"},{"location":"settings/#popup_maximum_width","text":"Setting that controls the maximum width of the popups generated by the plugin. Default value \"popup_maximum_width\" : 1800 ,","title":"popup_maximum_width"},{"location":"settings/#popup_maximum_height","text":"Setting that controls the maximum height of the popups generated by the plugin. Default value \"popup_maximum_height\" : 800 ,","title":"popup_maximum_height"},{"location":"settings/#triggers","text":"Defines all characters that trigger auto-completion. The default value is: Default value \"triggers\" : [ \".\" , \"->\" , \"::\" , \" \" , \" \" , \"(\" , \"[\" ] ,","title":"triggers"},{"location":"settings/#valid_lang_syntaxes","text":"A dictionary that defines a mapping from language to an array of valid syntaxes for it. The values here are good defaults, but feel free to customize the list to your liking. When modifying this setting make sure that all 4 languages have values. Default value \"valid_lang_syntaxes\" : { \"C\" : [ \"C\" , \"C Improved\" , \"C99\" ], \"CPP\" : [ \"C++\" , \"C++11\" ], \"OBJECTIVE_C\" : [ \"Objective-C\" ], \"OBJECTIVE_CPP\" : [ \"Objective-C++\" ] } , Warning When specifying this setting in your user or project settings make sure to keep ALL language keys.","title":"valid_lang_syntaxes"},{"location":"settings/#ignore_list","text":"Do not run the plugin for any files that match these paths. Use glob/fnmatch shell-style filename expansion. In addition, you can still use '~' to mark the home directory. Default value \"ignore_list\" : [ \"~/some_folder/*\" , \"/some/absolute/file.ext\" , \"$project_base_path/some/project/path/*\" , ] ,","title":"ignore_list"},{"location":"settings/#use_libclang","text":"If set to true will use libclang through python bindings. This offers much better performance generally, but can be buggy on some systems. When set to false will use clang_binary and parse the output of clang -Xclang -code-complete-at <some_file> instead. Default value \"use_libclang\" : true ,","title":"use_libclang"},{"location":"settings/#use_default_includes","text":"If set to true there will be default includes added to the \"common_flags\" . We generate these includes from running the following command on some empty temp file test.cc : <clang_binary> -c test.cc -v See clang_binary setting for more details on what clang binary will be in use. Default value \"use_default_includes\" : true ,","title":"use_default_includes"},{"location":"settings/#verbose","text":"Output lots of additional information in the console. Useful for debugging. Off by default. Default value \"verbose\" : false ,","title":"verbose"},{"location":"settings/#include_file_folder","text":"Add the folder with current file with -I flag. Default value \"include_file_folder\" : true ,","title":"include_file_folder"},{"location":"settings/#include_file_parent_folder","text":"Add the parent folder of the current file's one with -I flag Default value \"include_file_parent_folder\" : true ,","title":"include_file_parent_folder"},{"location":"settings/#clang_binary","text":"Pick the clang binary used by the plugin. This is used to determine the version of the plugin and pick correct libclang bindings or for code completion when the setting use_libclang is set to false . Default value \"clang_binary\" : \"clang++\" ,","title":"clang_binary"},{"location":"settings/#cmake_binary","text":"Pick the binary used for cmake . Default value \"cmake_binary\" : \"cmake\" , Warning Please make sure the binary you provide is accessible from the command line on your system.","title":"cmake_binary"},{"location":"settings/#autocomplete_all","text":"Ignore triggers and try to complete after each character Default value \"autocomplete_all\" : false , Danger Can be very slow! Enable only if you know what you are doing!","title":"autocomplete_all"},{"location":"settings/#hide_default_completions","text":"Hide the completions generated by Sublime Text and other plugins. Default value \"hide_default_completions\" : false ,","title":"hide_default_completions"},{"location":"settings/#max_cache_age","text":"Plugin uses smart caching to not load the data for the translation units (TUs) more times than needed. To save space we want to clear the unused data, so we remove cache data older than specified time. Tip Minimum value is 30 seconds. Format: <hours>:<minutes>:<seconds>: \"HH:MM:SS\" . Default value \"max_cache_age\" : \"00:30:00\" ,","title":"max_cache_age"},{"location":"settings/#show_type_info","text":"Show additional information on hover over function call/variable etc. This replaces default sublime on hover behavior. Default value \"show_type_info\" : true ,","title":"show_type_info"},{"location":"settings/#show_type_body","text":"Show body of struct/class/typedef declaration in a tooltip invoked by calling info enabled by the setting show_type_info . Default value \"show_type_body\" : true ,","title":"show_type_body"},{"location":"settings/#show_index_references","text":"We only can get declarations from clang AST. This can show references to the symbol under cursor taking them from Sublime Text index. Default value \"show_index_references\" : true ,","title":"show_index_references"},{"location":"settings/#libclang_path","text":"If the libclang library cannot be found in standard places, the user can provide a path to libclang . This path can either be a full path to the libclang library, e.g. /usr/lib/libclang.so or a folder that contains libclang library, e.g. /usr/lib/ . This setting generally should not be needed. Default value \"libclang_path\" : \"<some_path_here>\" ,","title":"libclang_path"},{"location":"settings/#progress_style","text":"Pick the progress style. There are currently these styles available: ColorSublime : \u28fe\u28fd\u28fb\u28bf\u287f\u28df\u28ef\u28f7 Moon : \ud83c\udf11\ud83c\udf12\ud83c\udf13\ud83c\udf14\ud83c\udf15\ud83c\udf16\ud83c\udf17\ud83c\udf18 None Default value \"progress_style\" : \"Moon\" ,","title":"progress_style"},{"location":"settings/#use_libclang_caching","text":"Controls if libclang caches the results. This works faster, but in rare cases can generate wrong completions. Usually it works just fine, so it is true by default. Default value \"use_libclang_caching\" : true ,","title":"use_libclang_caching"},{"location":"settings/#header_to_source_mapping","text":"Templates to find source files for headers in case we use a compilation database: Such a DB does not contain the required compile flags for header files. In order to find a best matching source file instead, you can use templates. Such templates describe how to find (relative to the header file) a source file which we can use to get compile flags for. In the simplest case, one can just use the (relative) path to where the source files are relative to your header file. For example, if your headers are in a subdirectory \"inc\" and your sources in a subdirectory \"src\" next to the first one, then you can use \"../src/\" as lookup. If needed, you can also use finer granular lookup templates by using UNIX style globbing patterns and placeholders. Placeholders are of the form '{placeholdername}' . The following placeholders can be used: basename: The base file name without the directory part. stamp: Like \"basename\" , but with the file name extension removed. ext: The file name extension of the header file. Default header - source mappings (click to expand) \"header_to_source_mapping\" : [ // Look for related files in the header's directory: \"./\" , // And in the \"src\" directory: \"../src/\" , // And in the \"source\" directory: \"../source/\" , // Example: Use flags but only from the source file // belonging to the header in question: // \"{stamp}.cpp\" , // Example: Use flags from a file with an // \"exotic\" file name suffix: // \" { stamp } .mycustomext ] ,","title":"header_to_source_mapping"},{"location":"settings/#target_compilers","text":"Controls if we try to retrieve built-in flags from a target compiler. If a compiler is not null , we try to ask it for the defines and include paths it sets implicitly and pass them to the clang compiler which is used to generate the code completion. If your completions require the knowledge about the toolchain, this option should improve the quality of the completions, however, in some corner cases it might cause completions to fail entirely. Default value \"target_compilers\" : { \"C\" : null , \"CPP\" : null , \"OBJECTIVE_C\" : null , \"OBJECTIVE_CPP\" : null } , Warning When specifying this setting in your user or project settings make sure to keep ALL language keys. Otherwise the plugin will show you an error dialog and ask you to specify all of them. Put null for those you don't want to use. Example: set only C/C++ compilers \"target_compilers\" : { \"C\" : \"gcc\" , \"CPP\" : \"g++\" , \"OBJECTIVE_C\" : null , \"OBJECTIVE_CPP\" : null } ,","title":"target_compilers"},{"location":"support/","text":"Support the project \u00b6 This project cost me a ton of sleepless nights. Liters of tea and coke have been consumed while writing this code. If you feel like this unhealthy behavior is something you might want to support - smash one of the buttons above (or below)! You're awesome! Become a contributor! \u00b6 Want to support the development and make me sleep even less? Submit a PR or throw some money at me. Your avatar will magically appear below! Become a sponsor! \u00b6 Are you using this plugin at work at a company? Fight your manager/boss to support the development of this plugin as it will totally make you so much more productive ! Plus your company avatar will appear on the main page so that they can boast that they support Open Source! Imagine how good you and your company will feel afterwards!","title":"Support this project"},{"location":"support/#support-the-project","text":"This project cost me a ton of sleepless nights. Liters of tea and coke have been consumed while writing this code. If you feel like this unhealthy behavior is something you might want to support - smash one of the buttons above (or below)! You're awesome!","title":"Support the project"},{"location":"support/#become-a-contributor","text":"Want to support the development and make me sleep even less? Submit a PR or throw some money at me. Your avatar will magically appear below!","title":"Become a contributor!"},{"location":"support/#become-a-sponsor","text":"Are you using this plugin at work at a company? Fight your manager/boss to support the development of this plugin as it will totally make you so much more productive ! Plus your company avatar will appear on the main page so that they can boast that they support Open Source! Imagine how good you and your company will feel afterwards!","title":"Become a sponsor!"}]}